//https://leetcode.com/problems/house-robber/


int Bigger(int a, int b)
{
    if(a>b)
        return a;
    else 
        return b;
}

int rob(int* nums, int numsSize)
{
    if(numsSize == 0)
        return 0;
    int* bufffer = (int*)malloc(sizeof(int)*numsSize);
    memset(bufffer, 0x00, sizeof(int)*numsSize);
    int max = nums[0];
    
    for(int i = 0; i < numsSize; i++)
    {
        if(i==0 || i==1)
            bufffer[i] = nums[i];
        else if(i==2)
            bufffer[2] = nums[2] + nums[0];
        else
        {
            bufffer[i] = nums[i] + Bigger(bufffer[i-2], bufffer[i-3]);
        }
        if(bufffer[i] > max)
            max = bufffer[i];
    }
    
    free(bufffer);
    return max;
}
==============================================================================================================================

int f_max(int a, int b)
{
    if(a > b)
        return a;
    else
        return b;
}

int rob(int* nums, int numsSize)
{
    if(numsSize == 0)
        return 0;
    
    int* buf = (int*)malloc(sizeof(int)*numsSize);
    memset(buf, 0x00, sizeof(int)*numsSize);
    
    for(int i = 0; i < numsSize; i++)
    {
        if(i == 0)
            buf[0] = nums[0];
        else if(i == 1)
            buf[1] = f_max(nums[0], nums[1]);
        else if(i == 2)
            buf[i] = nums[i] + buf[i-2];
        else
        {
            buf[i] = nums[i] + f_max(buf[i-2], buf[i-3]);
        }
    }
    
    if(numsSize > 2)
    {
        return f_max(buf[numsSize-1], buf[numsSize-2]);
    }
    else
        return buf[numsSize-1];
}
==============================================================================================================================


int f_max(int a, int b)
{
    if(a > b)
        return a;
    else
        return b;
}

int rob(int* nums, int numsSize)
{
    if(numsSize == 0)
        return 0;
    
    int* buf = (int*)malloc(sizeof(int)*numsSize);
    memset(buf, 0x00, sizeof(int)*numsSize);
    
    for(int i = 0; i < numsSize; i++)
    {
        if(i == 0)
            buf[i] = nums[i];
        else if(i == 1)
            buf[i] = f_max(nums[0], nums[1]);
        else
        {
            buf[i] = f_max(nums[i]+buf[i-2], buf[i-1]);
        }
    }
    
    int ret = buf[numsSize-1];
    free(buf);
    return ret;
}
==============================================================================================================================

int f_max(int a, int b)
{
    if(a>b)
        return a;
    else
        return b;
}

int rob(int* nums, int numsSize)
{
    int max = 0;
    int val1 = 0;
    int val2 = 0;
    
    for(int i = 0; i < numsSize; i++)
    {
        if( i == 0)
        {
            max = nums[0];
            val2 = max;
        }
        else if(i == 1)
        {
            max = f_max(nums[0], nums[1]);
            val1 = max;
        }
        else
        {
            max = f_max(nums[i]+val2, val1);
            val2 = val1;
            val1 = max;
        }
    }
    
    return max;
}
