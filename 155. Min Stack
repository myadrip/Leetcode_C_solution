//https://leetcode.com/problems/min-stack/

typedef struct node
{
    int val;
    int min;
} NODE;

typedef struct 
{
    int capacity;
    int count;
    NODE* stack;
} MinStack;

/** initialize your data structure here. */

MinStack* minStackCreate() 
{
    MinStack* obj = (MinStack*)malloc(sizeof(MinStack));
    obj->capacity = 1;
    obj->count = 0;
    obj->stack = (NODE*)malloc(sizeof(NODE)*(obj->capacity));
    

    return obj;
}

void minStackPush(MinStack* obj, int x) 
{
    if(obj->capacity == obj->count)
    {
        obj->capacity = (obj->capacity)*2;
        obj->stack = (NODE*)realloc(obj->stack, sizeof(NODE)*(obj->capacity));
    }
    obj->stack[obj->count].val = x;
    
    if(obj->count == 0)
        obj->stack[obj->count].min = x;
    else
    {
        if(obj->stack[obj->count-1].min > x)
        {
            obj->stack[obj->count].min = x;
        }
        else
        {
            obj->stack[obj->count].min = obj->stack[obj->count-1].min;
        }
    }
    obj->count++;
    return;
}

void minStackPop(MinStack* obj) 
{
    obj->count--;
}

int minStackTop(MinStack* obj) 
{
    int data = obj->stack[obj->count-1].val;
    return data;
}

int minStackGetMin(MinStack* obj) 
{
    int data = obj->stack[obj->count-1].min;
    return data;
}

void minStackFree(MinStack* obj) 
{
    if(obj->stack)
        free(obj->stack);
    free(obj);
    return;
}

/**
 * Your MinStack struct will be instantiated and called as such:
 * MinStack* obj = minStackCreate();
 * minStackPush(obj, x);
 
 * minStackPop(obj);
 
 * int param_3 = minStackTop(obj);
 
 * int param_4 = minStackGetMin(obj);
 
 * minStackFree(obj);
*/
