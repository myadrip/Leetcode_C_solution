//https://leetcode.com/problems/minimum-path-sum/

int** map;

int min(int a, int b)
{
    if(a>b)
        return b;
    else
        return a;
}


int func(int** grid, int row, int col)
{
    //printf("row:%d col:%d\n", row, col);
    if(map[row][col] != -1)
        return map[row][col];
    
    if(row == 0 && col == 0)
    {
        map[row][col] = grid[row][col];
        return map[row][col];
    }
    else if(row == 0)
    {
        map[row][col] = grid[row][col] + func(grid, row, col-1);
        return map[row][col];
    }
    else if(col == 0)
    {
        map[row][col] = grid[row][col] + func(grid, row-1, col);
        return map[row][col];
    }
    else
    {
        map[row][col] = grid[row][col] + min(func(grid, row-1, col), func(grid, row, col-1));
        return map[row][col];
    }
    
}

int minPathSum(int** grid, int gridSize, int* gridColSize)
{
    int row = gridSize;
    int col = gridColSize[gridSize-1];
    int rv = 0;
    
    map = (int**)malloc(sizeof(int*)*row);
    for(int i = 0; i < row; i++)
    {
        map[i] = (int*)malloc(sizeof(int)*col);
        for(int j = 0; j < col; j++)
            map[i][j] = -1;
    }
    
    func(grid, row-1, col-1);
    
    rv = map[row-1][col-1];

    for(int i = 0; i < row; i++)
        free(map[i]);
    free(map);
    map = NULL;
    
    return rv;
}
