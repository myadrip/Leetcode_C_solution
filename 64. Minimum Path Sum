//https://leetcode.com/problems/minimum-path-sum/



int min(int a, int b)
{
    if(a < b)
        return a;
    else
        return b;
}

int minPathSum(int** grid, int gridSize, int* gridColSize)
{
    int** buf = (int**)malloc(sizeof(int*)*gridSize);
    
    for(int i = 0; i < gridSize; i++)
    {
        buf[i] = (int*)malloc(sizeof(int)*gridColSize[0]);
        memset(buf[i], 0x00, sizeof(int)*gridColSize[0]);
    }
    
    for(int r = 0; r < gridSize; r++)
    {
        for(int c = 0; c < gridColSize[0]; c++)
        {
            if(r == 0 && c == 0)
            {
                buf[r][c] = grid[r][c];
            }
            else if(c == 0)
            {
                buf[r][c] = grid[r][c] + buf[r-1][c];
                
            }
            else if(r == 0)
            {
                buf[r][c] = grid[r][c] + buf[r][c-1];
            }
            else
            {
                buf[r][c] = grid[r][c] + min(buf[r-1][c], buf[r][c-1]);
            }
        }
    }
    
    int ret = buf[gridSize-1][gridColSize[0]-1];
    for(int i = 0; i < gridSize; i++)
    {
        free(buf[i]);
    }
    free(buf);
    return ret;
}
