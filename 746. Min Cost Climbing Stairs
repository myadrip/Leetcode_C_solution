//https://leetcode.com/problems/min-cost-climbing-stairs/



int less(int a, int b)
{
    if(a>b)
        return b;
    else
        return a;
}

int minCostClimbingStairs(int* cost, int costSize)
{
    int* min = (int*)malloc(sizeof(int)* costSize);
    
    for(int i = 0; i < costSize; i++)
    {
        if(i < 2)
        {
            min[i] = 0;
        }
        else
        {
            min[i] = less(cost[i-1]+min[i-1], cost[i-2]+min[i-2]);
        }
            
    }
    int rv = less(cost[costSize-1]+min[costSize-1], cost[costSize-2]+min[costSize-2]);
    free(min);
    return rv;
}


================================================================================================================

int less(int a, int b)
{
    if(a > b)
        return b;
    else
        return a;
}

int minCostClimbingStairs(int* cost, int costSize)
{
    int f0 = 0;
    int f1 = 0;
    int f2 = 0;
    
    for(int i = costSize-1; i >= 0; i--)
    {
        f0 = cost[i] + less(f1, f2);
        f2 = f1;
        f1 = f0;
    }
    
    return less(f1, f2);

}

