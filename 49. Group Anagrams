/*
Given an array of strings, group anagrams together.

Example:

Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note:

All inputs will be in lowercase.
The order of your output does not matter.
Accepted
*/


bool bIsAnagram(char* a, char* b)
{
    int len1 = strlen(a);
    int len2 = strlen(b);
    if(len1 != len2)
        return false;
    int alphabet[26] = {0,};
    
    for(int i = 0; i < len1; i++)
    {
        alphabet[a[i] - 'a']++;
    }
    for(int i = 0; i < len2; i++)
    {
        alphabet[b[i] - 'a']--;
        if(alphabet[b[i] - 'a'] < 0)
            return false;
    }
    
    for(int i = 0; i < 26; i++)
    {
        if(alphabet[i] != 0)
            return false;
    }
    return true;
}
char*** groupAnagrams(char ** strs, int strsSize, int* returnSize, int** returnColumnSizes)
{
    int* map = (int*)malloc(sizeof(int)*strsSize);
    for(int i = 0; i < strsSize; i++)
    {
        map[i] = -1;
    }
    (*returnSize) = 0;
    (*returnColumnSizes) = (int*)malloc(sizeof(int)*strsSize);
    memset((*returnColumnSizes), 0x00, sizeof(int)*strsSize);
    
    char*** rv = (char***)malloc(sizeof(char**)*strsSize);
    for(int i = 0; i < strsSize; i++)
    {
        rv[i] = (char**)malloc(sizeof(char*)*strsSize);
    }
    for(int i = 0; i < strsSize; i++)
    {
        if(map[i] == -1)
        {
            rv[(*returnSize)][(*returnColumnSizes)[(*returnSize)]] = (char*)malloc(sizeof(char)*(strlen(strs[i])+1));
            memcpy(rv[(*returnSize)][(*returnColumnSizes)[(*returnSize)]], strs[i], sizeof(char)*(strlen(strs[i])+1));
            (*returnColumnSizes)[(*returnSize)]++;
            map[i] = (*returnSize);

            for(int j = i+1; j < strsSize; j++)
            {
                if( bIsAnagram(strs[i], strs[j]))
                {
                    rv[(*returnSize)][(*returnColumnSizes)[(*returnSize)]] = (char*)malloc(sizeof(char)*(strlen(strs[i])+1));
                    memcpy(rv[(*returnSize)][(*returnColumnSizes)[(*returnSize)]], strs[j], sizeof(char)*(strlen(strs[i])+1));                    
                    (*returnColumnSizes)[(*returnSize)]++;
                    map[j] = (*returnSize);
                }
            }            
            (*returnSize)++;
            
        }
    }
    
    return rv;

}
