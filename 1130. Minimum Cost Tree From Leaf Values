// https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/



int find_neighbor(int* arr, int arrSize, int idx)
{
    if(idx == 0)
    {
        for(int i = idx+1; i < arrSize; i++)
            if(arr[i] != INT_MAX)
                return i;
        return -1;
    }
    else if(idx == arrSize-1)
    {
        for(int i = idx-1; i >= 0; i--)
            if(arr[i] != INT_MAX)
                return i;
        return -1;
    }
    else
    {
        int left = -1;
        int right = -1;
        
        for(int i = idx+1; i < arrSize; i++)
        {
            if(arr[i] != INT_MAX)
            {
                right = i;
                break;
            }
        }
        for(int i = idx-1; i >= 0; i--)
        {
            if(arr[i] != INT_MAX)
            {
                left = i;
                break;
            }
        }
        
        if(left != -1 && right != -1)
        {
            if(arr[left] > arr[right])
                return right;
            else
                return left;
        }
        else if(left == -1)
        {
            return right;
        }
        else if(right == -1)
        {
            return left;
        }
        else
            return -1;
    }
}

int mctFromLeafValues(int* arr, int arrSize)
{
    int ret = 0;
    int min = INT_MAX;
    int idx = 0;
    int idx_ne = 0;
    
    while(1)
    {
        min = INT_MAX;
        for(int i = 0; i < arrSize; i++)
        {
            if(arr[i] != INT_MAX)
            {
                if(arr[i] < min)
                {
                    min = arr[i];
                    idx = i;
                }
            }
        }
        idx_ne = find_neighbor(arr, arrSize, idx);
        if(idx_ne == -1)
        {
            break;
        }
        ret += arr[idx]*arr[idx_ne];
        arr[idx] = INT_MAX;
    }
    return ret;
}
