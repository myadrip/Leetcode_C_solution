// https://leetcode.com/problems/longest-common-subsequence/


int max(int a, int b)
{
    if(a > b)
        return a;
    else
        return b;
}

int longestCommonSubsequence(char * text1, char * text2)
{
    int len1 = strlen(text1);
    int len2 = strlen(text2);
    
    int** dp = (int**)malloc(sizeof(int*)*len1);
    for(int i = 0; i < len1; i++)
    {
        dp[i] = (int*)malloc(sizeof(int)* len2);
        memset(dp[i], 0x00, sizeof(int)* len2);
    }
    
    for(int r = 0; r < len1; r++)
    {
        for(int c = 0; c < len2; c++)
        {
            if(text1[r] == text2[c])
            {
                if(r == 0 || c == 0)
                {
                    dp[r][c] = 1;
                }
                else
                {
                    dp[r][c] = dp[r-1][c-1] + 1;
                }
            }
            else
            {
                if(r > 0 && c > 0)
                    dp[r][c] = max(dp[r-1][c], dp[r][c-1]);
                else if(r > 0)
                    dp[r][c] = dp[r-1][c];
                else if(c > 0)
                    dp[r][c] = dp[r][c-1];
                else
                    dp[r][c] = 0;
            }
        }
    }
    
    int ret = dp[len1-1][len2-1];
    
    for(int i = 0; i < len1; i++)
        free(dp[i]);
    free(dp);
    
    return ret;
}
