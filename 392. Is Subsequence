//https://leetcode.com/problems/is-subsequence/

bool isSubsequence(char* s, char* t)
{
    int len1 = strlen(s);
    int len2 = strlen(t);
    
    if(len1 > len2)
        return false;
    
    int idx1 = 0;
    int idx2 = 0;
    
    while( idx1 < len1 && idx2 < len2)
    {
        if(s[idx1] == t[idx2])
        {
            idx1++;
            idx2++;
        }
        else
            idx2++;
    }
    
    if(idx1 == len1)
        return true;
    else
        return false;
}

=======================================================================================================================
bool isSubsequence(char * s, char * t)
{
    
    int str1 = strlen(s);
    int str2 = strlen(t);
    int pos = 0;
    if(str1 == 0)
        return true;
    
    for(int i = 0; i < str2; i++)
    {
        if(s[pos] == t[i])
        {
            pos++;
            if(pos == str1)
                return true;
        }        
    }
    
    return false;
}


=======================================================================================================================


int bigger(int a, int b)
{
    if(a > b)
        return a;
    else
        return b;
}

bool isSubsequence(char * s, char * t)
{
    int str1 = strlen(s);
    int str2 = strlen(t);
    if(str1 == 0)
        return true;
    else if(str2 == 0)
        return false;
    
    int** buf = (int**)malloc(sizeof(int*)*(str1));
    for(int i = 0; i < str1; i++)
    {
        buf[i] = (int*)malloc(sizeof(int)*(str2));
        memset(buf[i], 0x00, sizeof(int)*(str2) );
    }
    
    
    
    for(int i = 0; i < str1; i++)
    {
        for(int j = 0; j < str2; j++)
        {
            if(s[i] == t[j])
            {
                if(i > 0 && j > 0)
                    buf[i][j] = buf[i-1][j-1]+1;
                else
                    buf[i][j] = 1;
            }
            else
            {
                if(i > 0 && j > 0)
                    buf[i][j] = bigger(buf[i][j-1], buf[i-1][j]);
                else if(i > 0)
                {
                    buf[i][j] = buf[i-1][j];
                }
                else if(j > 0)
                {
                    buf[i][j] = buf[i][j-1];
                }
                else
                    buf[i][j] = 0;
                
            }
        }
    }
    
    if(buf[str1-1][str2-1] == str1)
        return true;
    else
        return false;
    
}
